define(['exports', 'react'], (function (exports, react) { 'use strict';

    class Timer extends react.Component {
        constructor() {
            super(...arguments);
            this.intervalId = null;
        }
        componentDidMount() {
            this.intervalId = setInterval(() => {
                this.forceUpdate();
            }, 1000);
        }
        componentWillUnmount() {
            if (this.intervalId) {
                clearInterval(this.intervalId);
            }
        }
        render() {
            const { value, isHour, isMinute, isSecond, style, className } = this.props;
            let sec, min, hr = 0;
            const selectedDate = value.value;
            const currentDate = new Date();
            if (!selectedDate) {
                return (react.createElement("div", { className: className, style: style }, "ERR!"));
            }
            const timeDifference = (selectedDate === null || selectedDate === void 0 ? void 0 : selectedDate.getTime()) - currentDate.getTime();
            const isNegative = timeDifference < 0;
            const absoluteTimeDifference = Math.abs(timeDifference);
            let formattedTime = `${isNegative ? "-" : ""}`;
            let tempTime = "";
            //Hour = true; Minute = true; Second = true
            if (isHour && isMinute && isSecond) {
                hr = Math.floor(absoluteTimeDifference / 3600000);
                min = Math.floor((absoluteTimeDifference % 3600000) / 60000);
                sec = Math.floor((absoluteTimeDifference % 60000) / 1000);
                tempTime =
                    `${String(hr).padStart(2, "0")}:` +
                        `${String(min).padStart(2, "0")}:` +
                        `${String(sec).padStart(2, "0")}`;
            }
            //Hour = true; Minute = true; Second = false
            else if (isHour && isMinute && !isSecond) {
                hr = Math.floor(absoluteTimeDifference / 3600000);
                min = Math.floor((absoluteTimeDifference % 3600000) / 60000);
                tempTime = `${String(hr).padStart(2, "0")}:` + `${String(min).padStart(2, "0")}:`;
            }
            //Hour = true; Minute = false; Second = false
            else if (isHour && !isMinute && !isSecond) {
                hr = Math.floor(absoluteTimeDifference / 3600000);
                tempTime = `${String(hr).padStart(2, "0")}`;
            }
            //Hour = true; Minute = false; Second = true
            else if (isHour && !isMinute && isSecond) {
                hr = Math.floor(absoluteTimeDifference / 3600000);
                sec = Math.floor((absoluteTimeDifference % 3600000) / 1000);
                tempTime = `${String(hr).padStart(2, "0")}:` + `${String(sec).padStart(2, "0")}`;
            }
            //Hour = false; Minute = true; Second = true
            else if (!isHour && isMinute && isSecond) {
                min = Math.floor(absoluteTimeDifference / 60000);
                sec = Math.floor((absoluteTimeDifference % 60000) / 1000);
                tempTime = `${String(min).padStart(2, "0")}:` + `${String(sec).padStart(2, "0")}`;
            }
            //Hour = false; Minute = true; Second = false
            else if (!isHour && isMinute && !isSecond) {
                min = Math.floor(absoluteTimeDifference / 60000);
                tempTime = `${String(min).padStart(2, "0")}`;
            }
            //Hour = false; Minute = false; Second = true
            else if (!isHour && !isMinute && isSecond) {
                sec = Math.floor(absoluteTimeDifference / 1000);
                tempTime = `${String(sec).padStart(2, "0")}`;
            }
            formattedTime = `${isNegative ? "-" : ""}` + tempTime;
            return (react.createElement("div", { className: className, style: style }, formattedTime));
        }
    }

    class CounterTimer extends react.Component {
        render() {
            return (react.createElement(Timer, { value: this.props.endDate, isHour: this.props.isHour, isMinute: this.props.isMinute, isSecond: this.props.isSecond, style: this.props.style, className: this.props.class }));
        }
    }

    exports.CounterTimer = CounterTimer;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
